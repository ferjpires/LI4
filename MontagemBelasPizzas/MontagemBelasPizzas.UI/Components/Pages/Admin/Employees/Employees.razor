@page "/employees"
@inject ILogger<Employees> Logger
@inject UtilizadorService UtilizadorService
@using MontagemBelasPizzas.UI.Components.Shared
@using Microsoft.AspNetCore.Components.Authorization
@using MontagemBelasPizzas.UI.Components.Pages.Account
@inject AuthenticationStateProvider AuthProvider
@inject NavigationManager NavigationManager
@inject IDialogService DialogService

@if (!isAuthenticated)
{
    <Login/>
}
else if (userRole == "Funcionario")
{
    <AccessDenied />
}
else if (userRole == "Administrador")
{
    <TableComponent TItem="Utilizador"
                    Title="Funcionários"
                    ColumnHeaders="columnHeaders"
                    Items="FuncionariosData"
                    PropertySelectors="propertySelectors"
                    OnAddClick="HandleAddClick"
                    OnEditClick="HandleEditClick"
                    OnRemoveClick="HandleRemoveClick" />
}


@code {
    // Validate authenticated User
    private AuthenticationState? authState;
    private bool isAuthenticated = false;
    private string? userName;
    private string? userRole;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            authState = await AuthProvider.GetAuthenticationStateAsync();
            var user = authState.User;

            if (user.Identity is not null && user.Identity.IsAuthenticated)
            {
                isAuthenticated = true;
                userName = user.Identity.Name;
                userRole = user.Claims.FirstOrDefault(c => c.Type == System.Security.Claims.ClaimTypes.Role)?.Value;
            }

            StateHasChanged();
        }
    }

    // Get the Employees 
    private List<string> columnHeaders = new List<string>
    {
        "Nome", "ID", "Data de Registo", "Produtos Realizados", "Produtos Rejeitados", "Satisfação", "Tempo Médio"
    };

    private List<Func<Utilizador, object>> propertySelectors = new List<Func<Utilizador, object>>
    {
        u => u.Nome,
        u => u.Id,
        u => u.DataDeCriacao.ToString("yyyy-MM-dd"),
        u => u.QuantidadeDeProdutosRealizados,
        u => u.QuantidadeDeProdutosRejeitados,
        u => $"{u.MediaDeSatisfacao:F1}%", // Format satisfaction as a percentage
        u => u.TempoMedioPorProduto.ToString(@"hh\:mm\:ss") // Format TimeSpan
    };

    private List<Utilizador> FuncionariosData = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Retrieve employees from the database
            var allUtilizadores = await UtilizadorService.GetAllUtilizadores();
            FuncionariosData = allUtilizadores
                .Where(u => u.Tipo == TipoUtilizador.Funcionario) // Filter by 'Funcionario'
                .ToList();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to load employees.");
        }
    }

    private void HandleAddClick()
    {
        // ou vamos para outra pagina ou metemos la em cima um pop up que está invisivel e este metodo ativa-o, escolham
        NavigationManager.NavigateTo("/employees/add");
    }

    private void HandleEditClick(Utilizador utilizador)
    {
        // ou vamos para outra pagina ou metemos la em cima um pop up que está invisivel e este metodo ativa-o, escolham
        NavigationManager.NavigateTo("/employees/edit");
    }

    private async Task HandleRemoveClick(Utilizador utilizador)
    {
        var parameters = new DialogParameters
        {
            { "ContentText", $"Tem a certeza que deseja remover o funcionário {utilizador.Nome}?" },
            { "ButtonText", "Remover" },
            { "Color", Color.Error }
        };

        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small };
        var dialog = DialogService.Show<ConfirmationPopUp>("Confirmação", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            try
            {
                await UtilizadorService.DeleteUtilizador(utilizador.Id);
                FuncionariosData.Remove(utilizador);
                Logger.LogInformation($"Removed: {utilizador.Nome}");
                StateHasChanged();
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, $"Failed to remove employee: {utilizador.Nome}");
            }
        }
    }

}
