@typeparam TItem

<div class="flex items-center space-x-4">
    <!-- Search -->
    <div class="flex items-center border rounded px-2">
        <input type="text" placeholder="Pesquisar" class="p-2 outline-none"
               @bind="SearchTerm" @bind:event="oninput" />
        <select class="outline-none p-1" @bind="SelectedSearchColumn">
            @for (var i = 0; i < ColumnHeaders.Count; i++)
            {
                <option value="@i">@ColumnHeaders[i]</option>
            }
        </select>
    </div>
    <!-- Order Dropdown -->
    <div>
        <select class="p-2 rounded border" @bind="SelectedOrderColumn">
            <option value="">Ordenar por...</option>
            @for (var i = 0; i < ColumnHeaders.Count; i++)
            {
                <option value="@i">@ColumnHeaders[i]</option>
            }
        </select>
    </div>
</div>

<div class="p-4 border rounded-md shadow bg-white">
    <div class="flex justify-between items-center mb-4">
        @Title
        <!-- Add Button -->
        <button class="bg-orange-500 text-white px-4 py-2 rounded hover:bg-orange-600" @onclick="OnAddClick">
            + Adicionar
        </button>
    </div>

    <table class="table-auto w-full border-collapse">
        <thead>
            <tr class="bg-gray-200">
                @if (ImageSelector != null)
                {
                    <th class="border px-4 py-2 text-left"></th>
                }
                @foreach (var header in ColumnHeaders)
                {
                    <th class="border px-4 py-2 text-left">@header</th>
                }
                <th class="border px-4 py-2">Ações</th>
            </tr>
        </thead>
        <tbody>
            @if (FilteredItems != null && FilteredItems.Any())
            {
                @foreach (var item in FilteredItems)
                {
                    <tr class="hover:bg-gray-100">
                        @if (ImageSelector != null)
                        {
                            <td class="border px-4 py-2">
                                <img src="@ImageSelector(item)" alt="Imagem" class="w-12 h-12 object-cover" />
                            </td>
                        }
                        @foreach (var property in PropertySelectors)
                        {
                            <td class="border px-4 py-2">@property(item)</td>
                        }
                        <td class="border px-4 py-2">
                            @if (OnEditClick.HasDelegate)
                            {
                                <button class="bg-yellow-500 text-white px-2 py-1 rounded hover:bg-yellow-600"
                                        @onclick="() => OnEditClick.InvokeAsync(item)">
                                    Editar
                                </button>
                            }
                            @if (OnRemoveClick.HasDelegate)
                            {
                                <button class="bg-red-500 text-white px-2 py-1 rounded hover:bg-red-600 ml-2"
                                        @onclick="() => OnRemoveClick.InvokeAsync(item)">
                                    Remover
                                </button>
                            }
                        </td>
                    </tr>
                }
            }
            else
            {
                <tr>
                    <td class="border px-4 py-2 text-center" colspan="@ColumnHeaders.Count + (ImageSelector != null ? 2 : 1)">
                        Nenhum dado disponível.
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>

@code {
    [Parameter] public string Title { get; set; } = string.Empty;
    [Parameter] public List<string> ColumnHeaders { get; set; } = new List<string>();
    [Parameter] public List<TItem>? Items { get; set; }
    [Parameter] public List<Func<TItem, object>> PropertySelectors { get; set; } = new List<Func<TItem, object>>();
    [Parameter] public Func<TItem, string>? ImageSelector { get; set; } // Function to get image URL
    [Parameter] public EventCallback OnAddClick { get; set; }
    [Parameter] public EventCallback<TItem> OnEditClick { get; set; }
    [Parameter] public EventCallback<TItem> OnRemoveClick { get; set; }

    private string SearchTerm { get; set; } = string.Empty;
    private int SelectedSearchColumn { get; set; } = 0;
    private int? SelectedOrderColumn { get; set; } = null;

    private List<TItem>? FilteredItems => Items?
        .Where(item =>
            string.IsNullOrEmpty(SearchTerm) ||
            PropertySelectors[SelectedSearchColumn](item)?.ToString()?.Contains(SearchTerm, StringComparison.OrdinalIgnoreCase) == true)
        .OrderBy(item =>
            SelectedOrderColumn.HasValue ? PropertySelectors[SelectedOrderColumn.Value](item) : null)
        .ToList();
}