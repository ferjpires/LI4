@using Microsoft.AspNetCore.Components.Authorization
@inject AuthenticationStateProvider AuthProvider
@using MontagemBelasPizzas.UI.Components.Pages.Account
@using MontagemBelasPizzas.UI.Authentication
@inject NavigationManager NavigationManager

<input type="checkbox" title="Navigation menu" class="navbar-toggler" />

<div class="d-flex flex-column bg-success vh-100" style="border-top-right-radius: 25px; border-bottom-right-radius: 25px;" onclick="document.querySelector('.navbar-toggler').click()">
    <nav class="flex-grow-1 mt-5">
        @if (!isAuthenticated)
        {
            <AccessDenied/>
        }
        else if (userRole == "Administrador")
        {
            <div class="nav-item px-3 py-1">
                <NavLink class="nav-link d-flex align-items-center text-light" href="admin-home">
                    <i class="bi bi-house-door me-2"></i>
                    <span>Página Inicial</span>
                </NavLink>
            </div>
            <div class="nav-item px-3 py-1">
                <NavLink class="nav-link d-flex align-items-center text-light" href="admin-products">
                    <i class="bi bi-boxes me-2"></i>
                    <span>Produtos</span>
                </NavLink>
            </div>
            <div class="nav-item px-3 py-1">
                <NavLink class="nav-link d-flex align-items-center text-light" href="inventory">
                    <i class="bi bi-box-seam me-2"></i>
                    <span>Compras e Vendas</span>
                </NavLink>
            </div>
            <div class="nav-item px-3 py-1">
                <NavLink class="nav-link d-flex align-items-center text-light" href="ingredients">
                    <i class="bi bi-clipboard me-2"></i>
                    <span>Ingredientes</span>
                </NavLink>
            </div>
            <div class="nav-item px-3 py-1">
                <NavLink class="nav-link d-flex align-items-center text-light" href="admins">
                    <i class="bi bi-person-vcard me-2"></i>
                    <span>Administradores</span>
                </NavLink>
            </div>
            <div class="nav-item px-3 py-1">
                <NavLink class="nav-link d-flex align-items-center text-light" href="employees">
                    <i class="bi bi-people me-2"></i>
                    <span>Funcionários</span>
                </NavLink>
            </div>
            <div class="nav-item px-3 py-2 mt-4">
                <NavLink class="nav-link d-flex align-items-center text-light" href="settings">
                    <i class="bi bi-gear me-2"></i>
                    <span>Definições</span>
                </NavLink>
            </div>
        }
        else if (userRole == "Funcionario")
        {
            <div class="nav-item px-3 py-1">
                <NavLink class="nav-link d-flex align-items-center text-light" href="employee-home">
                    <i class="bi bi-house-door-fill me-2"></i>
                    <span>Página Inicial</span>
                </NavLink>
            </div>
            <div class="nav-item px-3 py-1">
                <NavLink class="nav-link d-flex align-items-center text-light" href="employee-products">
                    <i class="bi bi-box me-2"></i>
                    <span>Produtos</span>
                </NavLink>
            </div>
        }
    </nav>
    <div class="px-3 py-2 mt-auto">
        <button class="btn d-flex align-items-center text-light" @onclick="HandleLogout" style="text-align: left;">
            <i class="bi bi-box-arrow-left me-2"></i>
            <span>Logout</span>
        </button>
    </div>
</div>

@code {
    private AuthenticationState? authState;
    private bool isAuthenticated = false;
    private string? userName;
    private string? userRole;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            authState = await AuthProvider.GetAuthenticationStateAsync();
            var user = authState.User;

            if (user.Identity is not null && user.Identity.IsAuthenticated)
            {
                isAuthenticated = true;
                userName = user.Identity.Name;
                userRole = user.Claims.FirstOrDefault(c => c.Type == System.Security.Claims.ClaimTypes.Role)?.Value;
            }

            StateHasChanged();
        }
    }

    private async Task HandleLogout()
    {
        if (AuthProvider is CustomAuthenticationStateProvider customAuthProvider)
        {
            await customAuthProvider.Logout();
        }

        NavigationManager.NavigateTo("/", forceLoad: true);
    }

}
