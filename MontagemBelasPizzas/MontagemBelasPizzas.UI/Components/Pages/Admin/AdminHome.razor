@page "/admin-home"
@using Microsoft.AspNetCore.Components.Authorization
@inject AuthenticationStateProvider AuthProvider
@inject NavigationManager NavigationManager
@using MontagemBelasPizzas.UI.Components.Pages.Account


@if (isLoading)
{
<!-- Mostra um spinner ou placeholder enquanto carrega os dados -->
<div class="loading text-center">

    
</div>
}
else if (!isAuthenticated)
{
    <AccessDenied/>
}
else if (userRole == "Funcionario")
{
    <AccessDenied />
}
else if (userRole == "Administrador")
{
    <div class="p-6">
        <div class="flex items-center space-x-2 mb-6 mt-4">
            <!-- Search -->
            <div class="flex bg-white rounded-full shadow-md px-4 py-2 w-1/2 justify-between">
                <div class="flex-column align-content-lg-center">
                    <i class="bi bi-search text-brown-500 mr-2" style="color: #7B351C;"></i>
                    <input type="text" placeholder="Pesquisar" class="outline-none"
                           style="width: 300px; color: #7B351C;" @bind="SearchTerm" @bind:event="oninput"/>
                </div>
                <select class="outline-none" style="color: #7B351C;" @bind="SelectedSearchColumn">
                    @for (var i = 0; i < ColumnHeaders.Count; i++)
                    {
                        <option value="@i">@ColumnHeaders[i]</option>
                    }
                </select>
            </div>
            <!-- Order Dropdown -->
            <div class="flex items-center bg-white rounded-full shadow-md px-4 py-2">
                <i class="bi bi-sort-down text-brown-500 mr-2" style="color: #7B351C;"></i>
                <select class="bg-transparent text-brown-500 outline-none cursor-pointer" style="color: #7B351C;" @bind="SelectedOrderColumn">
                    <option value="">Ordenar por...</option>
                    @for (var i = 0; i < ColumnHeaders.Count; i++)
                    {
                        <option value="@i">@ColumnHeaders[i]</option>
                    }
                </select>
            </div>
        </div>

        <!-- Metrics Section -->
        <div class="flex justify-center mt-16">
            <div class="text-white text-center p-1 shadow" style="background-color: #FC5825; border-radius: 20px; width: 300px">
                <div class="font-bold">Custo Total:</div>
                <div>@TotalCost.ToString("C")</div>
            </div>
            <div class="text-white text-center p-1 mx-5 shadow" style="background-color: #7FA979; border-radius: 20px; width: 300px">
                <div class="font-bold">Receita Total:</div>
                <div>@TotalRevenue.ToString("C")</div>
            </div>
            <div class="text-white text-center p-1 shadow" style="background-color: #FFB253; border-radius: 20px; width: 300px">
                <div class="font-bold">Margem de Lucro:</div>
                <div>@ProfitMargin.ToString("C")</div>
            </div>
        </div>


        <!-- Graphs Section -->
        <!-- Graphs Section -->
        <div class="flex space-x-6 mt-12">
            <div class="flex-1 p-4 bg-white shadow" style="border-radius: 20px">
                <h2 class="text-lg font-semibold mb-4" style="color: #7B351C">Histórico de Compras e Vendas</h2>
                <div>
                    <MudChart ChartType="ChartType.Line" ChartSeries="@Series1" XAxisLabels="@XAxisLabels1" Width="100%" Height="350" ChartOptions="options1"></MudChart>
                </div>
            </div>
            <div class="flex-1 p-4 bg-white shadow" style="border-radius: 20px">
                <h2 class="text-lg font-semibold mb-4" style="color: #7B351C">Produtos Mais Vendidos</h2>
                <MudChart ChartType="ChartType.Bar" ChartSeries="@Series2" @bind-SelectedIndex="Index" XAxisLabels="@XAxisLabels2" Width="100%" Height="350px" ChartOptions="options2"></MudChart>
            </div>
        </div>

        <!-- History Table -->
        <div class="p-4 bg-white shadow mt-12" style="border-radius: 20px">
            <div class="mb-4 fs-3" style="font-weight: 900; color: #7B351C">Histórico</div>
            <table class="table-auto w-full">
                <thead>
                <tr class=" border-t py-4">
                    <th class="px-4 py-4" style="color: #7B351C">Tipo</th>
                    <th class="px-4 py-4" style="color: #7B351C">Nome</th>
                    <th class="px-4 py-4" style="color: #7B351C">ID</th>
                    <th class="px-4 py-4" style="color: #7B351C">Data</th>
                    <th class="px-4 py-4" style="color: #7B351C">Quantidade</th>
                    <th class="px-4 py-4" style="color: #7B351C">Preço</th>
                </tr>
                </thead>
                <tbody>
                @foreach (var record in FilteredHistory)
                {
                    <tr class="border-t py-4">
                        <td class="px-4 py-4" style="color: #7B351C">@record.Type</td>
                        <td class="px-4 py-4" style="color: #7B351C">@record.Name</td>
                        <td class="px-4 py-4" style="color: #7B351C">@record.Id</td>
                        <td class="px-4 py-4" style="color: #7B351C">@record.Date.ToString("dd/MM/yyyy")</td>
                        <td class="px-4 py-4" style="color: #7B351C">@record.Quantity</td>
                        <td class="px-4 py-4" style="color: #7B351C">@record.Price.ToString("C")</td>
                    </tr>
                }
                </tbody>
            </table>
        </div>
    </div>
}


@code {
    private AuthenticationState? authState;
    private bool isAuthenticated = false;
    private string? userRole;
    private bool isLoading = true;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            authState = await AuthProvider.GetAuthenticationStateAsync();
            var user = authState.User;

            if (user.Identity is not null && user.Identity.IsAuthenticated)
            {
                isAuthenticated = true;
                userRole = user.Claims.FirstOrDefault(c => c.Type == System.Security.Claims.ClaimTypes.Role)?.Value;
            }
            isLoading = false;
            StateHasChanged();
        }
    }

    // What the second fuck is this?
    
    private string SearchTerm { get; set; } = string.Empty;
    private int SelectedSearchColumn { get; set; } = 0;
    private int? SelectedOrderColumn { get; set; } = null;
    
    private decimal TotalCost => History.Sum(record => record.Price * record.Quantity);
    private decimal TotalRevenue => History.Sum(record => record.Price * record.Quantity * 1.5m); // Example multiplier for revenue
    private decimal ProfitMargin => TotalRevenue - TotalCost;


    private List<string> ColumnHeaders = new List<string>
    {
        "Tipo", "Nome", "ID", "Data", "Quantidade", "Preço"
    };

    private List<Record> History = new List<Record>
    {
        new Record { Type = "Produto", Name = "Pizza Margherita", Id = 101, Date = DateTime.Parse("2024-02-12"), Quantity = 200, Price = 450.00m },
        new Record { Type = "Ingrediente", Name = "Queijo", Id = 201, Date = DateTime.Parse("2024-01-15"), Quantity = 50, Price = 120.00m },
        new Record { Type = "Produto", Name = "Pizza Pepperoni", Id = 102, Date = DateTime.Parse("2024-03-10"), Quantity = 180, Price = 520.00m },
        new Record { Type = "Ingrediente", Name = "Molho de Tomate", Id = 202, Date = DateTime.Parse("2024-01-18"), Quantity = 300, Price = 80.00m },
        new Record { Type = "Produto", Name = "Pizza Vegetariana", Id = 103, Date = DateTime.Parse("2024-02-25"), Quantity = 120, Price = 500.00m },
        new Record { Type = "Ingrediente", Name = "Azeitonas", Id = 203, Date = DateTime.Parse("2024-02-01"), Quantity = 70, Price = 40.00m },
        new Record { Type = "Produto", Name = "Pizza de Camarão", Id = 104, Date = DateTime.Parse("2024-04-05"), Quantity = 90, Price = 600.00m },
        new Record { Type = "Ingrediente", Name = "Camarão", Id = 204, Date = DateTime.Parse("2024-01-28"), Quantity = 100, Price = 200.00m },
        new Record { Type = "Produto", Name = "Pizza de Frango", Id = 105, Date = DateTime.Parse("2024-03-12"), Quantity = 140, Price = 480.00m },
        new Record { Type = "Ingrediente", Name = "Frango", Id = 205, Date = DateTime.Parse("2024-02-15"), Quantity = 80, Price = 150.00m },
        new Record { Type = "Produto", Name = "Pizza Quatro Queijos", Id = 106, Date = DateTime.Parse("2024-04-10"), Quantity = 110, Price = 530.00m },
        new Record { Type = "Ingrediente", Name = "Bacon", Id = 206, Date = DateTime.Parse("2024-03-01"), Quantity = 60, Price = 100.00m },
        new Record { Type = "Produto", Name = "Pizza de Bacon", Id = 107, Date = DateTime.Parse("2024-05-02"), Quantity = 100, Price = 570.00m },
        new Record { Type = "Ingrediente", Name = "Orégãos", Id = 207, Date = DateTime.Parse("2024-01-10"), Quantity = 150, Price = 30.00m },
        new Record { Type = "Produto", Name = "Pizza de Atum", Id = 108, Date = DateTime.Parse("2024-02-20"), Quantity = 95, Price = 540.00m },
        new Record { Type = "Ingrediente", Name = "Atum", Id = 208, Date = DateTime.Parse("2024-03-05"), Quantity = 85, Price = 180.00m }
        // Adicionar mais registros conforme necessário
    };

    private IEnumerable<Record> FilteredHistory => History
        .Where(record => string.IsNullOrEmpty(SearchTerm) || MatchesSearchTerm(record))
        .OrderBy(record => SelectedOrderColumn.HasValue ? GetPropertyValue(record, SelectedOrderColumn.Value) : null);

    private bool MatchesSearchTerm(Record record)
    {
        var value = GetPropertyValue(record, SelectedSearchColumn)?.ToString()?.ToLower() ?? string.Empty;
        return value.Contains(SearchTerm.ToLower());
    }

    private object GetPropertyValue(Record record, int columnIndex)
    {
        return columnIndex switch
        {
            0 => record.Type,
            1 => record.Name,
            2 => record.Id,
            3 => record.Date,
            4 => record.Quantity,
            5 => record.Price,
            _ => null
        };
    }

    public class Record
    {
        public string Type { get; set; }
        public string Name { get; set; }
        public int Id { get; set; }
        public DateTime Date { get; set; }
        public int Quantity { get; set; }
        public decimal Price { get; set; }
    }
    
    private ChartOptions options1 = new ChartOptions();
    public List<ChartSeries> Series1 = new List<ChartSeries>()
    {
        new ChartSeries() { Name = "Compras", Data = new double[] { 90, 79, 72, 69, 62, 62, 55, 65, 70, 77, 98, 104 }},
        new ChartSeries() { Name = "Vendas", Data = new double[] { 100, 44, 60, 90, 30, 20, 10, 50, 80, 60, 80, 160 }}
    };
    public string[] XAxisLabels1 = { "Jan", "Feb", "Mar", "Abr", "Mai", "Jun", "Jul", "Aug", "Set", "Out", "Nov", "Dez" };
    
    private ChartOptions options2 = new ChartOptions();
    private int Index = -1; //default value cannot be 0 -> first selectedindex is 0.

    public List<ChartSeries> Series2 = new List<ChartSeries>()
    {
        new ChartSeries() { Name = "United States", Data = new double[] { 0, 40, 20, 25, 27, 46, 0 } },
    };
    public string[] XAxisLabels2 = { "", "Pizza Calabresa", "Pizza Pepperoni", "Pizza Mar", "Pizza Ananas", "Pizza Pesto", "" };
    
    protected override void OnInitialized()
    {
        options1.InterpolationOption = InterpolationOption.NaturalSpline;
        options1.YAxisFormat = "0";
        options1.ChartPalette = new[] { "#FFB253", "#7FA979" };

        options2.YAxisFormat = "0";
        options2.ChartPalette = new[] { "#FC5825" };
        options2.ShowLabels = false;
        options2.ShowLegendLabels = false;
        options2.ShowLegend = false;
        options2.ShowToolTips = false;
    }
}
