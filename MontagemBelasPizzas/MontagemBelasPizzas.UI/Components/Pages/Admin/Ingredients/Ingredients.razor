@page "/ingredients"
@inject ILogger<Ingredients> Logger
@inject IngredienteService IngredienteService
@inject IDialogService DialogService
@using MontagemBelasPizzas.UI.Components.Pages.Account
@using MontagemBelasPizzas.UI.Components.Shared
@inject AuthenticationStateProvider AuthProvider
@inject NavigationManager NavigationManager

@if (!isAuthenticated)
{
    <Login/>
}
else if (userRole == "Funcionario")
{
    <AccessDenied />
}
else if (userRole == "Administrador")
{
    <div class="p-6">
        <!-- Search and Order -->
        <div class="flex justify-between items-center mb-4">
            <!-- Search -->
            <div class="flex items-center border rounded px-2 space-x-2">
                <input type="text" placeholder="Pesquisar" class="p-2 outline-none"
                       @bind="SearchTerm" @bind:event="oninput" />
                <select class="outline-none p-1" @bind="SelectedSearchColumn">
                    @for (var i = 0; i < ColumnHeaders.Count; i++)
                    {
                        <option value="@i">@ColumnHeaders[i]</option>
                    }
                </select>
            </div>
            <!-- Order Dropdown -->
            <div>
                <select class="p-2 rounded border" @bind="SelectedOrderColumn">
                    <option value="">Ordenar por...</option>
                    @for (var i = 0; i < ColumnHeaders.Count; i++)
                    {
                        <option value="@i">@ColumnHeaders[i]</option>
                    }
                </select>
            </div>
            <!-- Add Button -->
            <button class="bg-orange-500 text-white px-4 py-2 rounded hover:bg-orange-600" @onclick="HandleAddClick">
                + Adicionar
            </button>
        </div>

        <!-- Ingredients List -->
        <div class="space-y-4">
            @foreach (var ingredient in FilteredIngredients)
            {
                <div class="flex items-center justify-between border rounded-md p-4 shadow">
                    <!-- Image and details -->
                    <div class="flex items-center space-x-4">
                        <img src="@ingredient.ImagemURL" alt="Image" class="h-12 w-12 rounded-full" />
                        <div>
                            <h3 class="text-lg font-semibold">@ingredient.Nome</h3>
                            <p class="text-sm text-gray-600">
                                Quantidade: @ingredient.QuantidadeEmStock | Preço: @ingredient.Preco€ | Em uso: @(ingredient.EmUso ? "sim" : "não")
                            </p>
                        </div>
                    </div>

                    <!-- Actions -->
                    <div class="flex space-x-2">
                        <button class="bg-red-500 text-white px-3 py-1 rounded hover:bg-red-600" @onclick="() => HandleRemoveClick(ingredient)">
                            ✖ Remover
                        </button>
                        <button class="bg-yellow-500 text-white px-3 py-1 rounded hover:bg-yellow-600" @onclick="() => HandleEditClick(ingredient)">
                            ✎ Editar
                        </button>
                    </div>
                </div>
            }
        </div>
    </div>
}

@code {
    // Validate authenticated User
    private AuthenticationState? authState;
    private bool isAuthenticated = false;
    private string? userName;
    private string? userRole;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            authState = await AuthProvider.GetAuthenticationStateAsync();
            var user = authState.User;

            if (user.Identity is not null && user.Identity.IsAuthenticated)
            {
                isAuthenticated = true;
                userName = user.Identity.Name;
                userRole = user.Claims.FirstOrDefault(c => c.Type == System.Security.Claims.ClaimTypes.Role)?.Value;
            }

            StateHasChanged();
        }
    }

    // Get the Ingredients
    private List<string> ColumnHeaders = new List<string>
    {
        "Nome", "Quantidade", "Preço", "Em uso"
    };

    private List<Ingrediente> IngredientsData = new();

    private string SearchTerm = string.Empty;
    private int SelectedSearchColumn = 0;
    private int SelectedOrderColumn = 0;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var ingredientes = await IngredienteService.GetAllIngredientes();
            IngredientsData = ingredientes.ToList();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to load ingredients.");
        }
    }

    private IEnumerable<Ingrediente> FilteredIngredients => IngredientsData
        .Where(i => SearchTerm == string.Empty || MatchesSearchTerm(i))
        .OrderBy(i => SelectedOrderColumn >= 0 ? GetPropertyValue(i, SelectedOrderColumn) : null);

    private void HandleAddClick()
    {
        NavigationManager.NavigateTo("/ingredients/add");
    }

    private void HandleEditClick(Ingrediente ingredient)
    {
        NavigationManager.NavigateTo($"/ingredients/edit/{ingredient.Id}");
    }

    private async Task HandleRemoveClick(Ingrediente ingredient)
    {
        var parameters = new DialogParameters
        {
            { "ContentText", $"Tem a certeza que deseja remover o ingrediente {ingredient.Nome}?" },
            { "ButtonText", "Remover" },
            { "Color", Color.Error }
        };

        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small };
        var dialog = DialogService.Show<ConfirmationPopUp>("Confirmação", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            try
            {
                await IngredienteService.DeleteIngrediente(ingredient.Id);
                IngredientsData.Remove(ingredient);
                Logger.LogInformation($"Removed: {ingredient.Nome}");
                StateHasChanged();
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, $"Failed to remove ingredient: {ingredient.Nome}");
            }
        }
    }

    private bool MatchesSearchTerm(Ingrediente ingredient)
    {
        var value = GetPropertyValue(ingredient, SelectedSearchColumn)?.ToString()?.ToLower() ?? string.Empty;
        return value.Contains(SearchTerm.ToLower());
    }

    private object GetPropertyValue(Ingrediente ingredient, int columnIndex)
    {
        return columnIndex switch
        {
            0 => ingredient.Nome,
            1 => ingredient.QuantidadeEmStock,
            2 => ingredient.Preco,
            3 => ingredient.EmUso ? "sim" : "não",
            _ => null
        };
    }
}
