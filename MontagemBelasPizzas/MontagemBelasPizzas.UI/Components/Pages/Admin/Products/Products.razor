@page "/admin-products"
@inject ILogger<Products> Logger
@inject ProdutoService ProdutoService
@inject IDialogService DialogService
@using MontagemBelasPizzas.UI.Components.Shared
@using MontagemBelasPizzas.UI.Components.Pages.Account
@inject AuthenticationStateProvider AuthProvider
@inject NavigationManager NavigationManager


@if (!isAuthenticated)
{
    <Login />
}
else if (userRole == "Funcionario")
{
    <AccessDenied />
}
else if (userRole == "Administrador")
{
    <TableComponent TItem="Produto"
                    Title="Produtos"
                    ColumnHeaders="columnHeaders"
                    Items="ProductsData"
                    PropertySelectors="propertySelectors"
                    ImageSelector="p => p.ImagemURL"
                    OnAddClick="HandleAddClick"
                    OnEditClick="HandleEditClick"
                    OnRemoveClick="HandleRemoveClick" />
}

@code {
    // Validate authenticated User
    private AuthenticationState? authState;
    private bool isAuthenticated = false;
    private string? userName;
    private string? userRole;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            authState = await AuthProvider.GetAuthenticationStateAsync();
            var user = authState.User;

            if (user.Identity is not null && user.Identity.IsAuthenticated)
            {
                isAuthenticated = true;
                userName = user.Identity.Name;
                userRole = user.Claims.FirstOrDefault(c => c.Type == System.Security.Claims.ClaimTypes.Role)?.Value;
            }

            StateHasChanged();
        }
    }

    // Get the Products
    private List<string> columnHeaders = new List<string>
    {
        "Nome", "Categoria", "ID", "Preço", "Inventário", "Realizações", "Vendas", "Rejeições", "Satisfação", "Média de tempo"
    };

    private List<Func<Produto, object>> propertySelectors = new List<Func<Produto, object>>
    {
        p => p.Nome,
        p => p.Categoria,
        p => p.Id,
        p => $"{p.Preco}€",
        p => p.QuantidadeEmStock,
        p => p.QuantidadeDeRealizacoes,
        p => p.QuantidadeDeVendas,
        p => p.QuantidadeDeRejeicoes,
        p => $"{p.MediaDeSatisfacao}%",
        p => p.MediaDoTempoDeMontagem.ToString("hh\\:mm\\:ss")
    };

    private List<Produto> ProductsData = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var produtos = await ProdutoService.GetAllProdutos();
            ProductsData = produtos.ToList();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to load products.");
        }
    }

    private void HandleAddClick()
    {
        NavigationManager.NavigateTo("/admin-products/add");
    }

    private void HandleEditClick(Produto produto)
    {
        NavigationManager.NavigateTo($"/admin-products/edit/{produto.Id}");
    }

    private async Task HandleRemoveClick(Produto produto)
    {
        var parameters = new DialogParameters
        {
            { "ContentText", $"Tem a certeza que deseja remover o produto {produto.Nome}?" },
            { "ButtonText", "Remover" },
            { "Color", Color.Error }
        };

        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small };
        var dialog = DialogService.Show<ConfirmationPopUp>("Confirmação", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            try
            {
                await ProdutoService.DeleteProduto(produto.Id);
                ProductsData.Remove(produto);
                Logger.LogInformation($"Removed: {produto.Nome}");
                StateHasChanged();
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, $"Failed to remove product: {produto.Nome}");
            }
        }
    }
}
